View(novel.types)
tail(novel.types)
find.antigen.emergence
tail(console.file)
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen$day = as.character(track.antigen$day)
novel.types$day = as.character(novel.types$day)
head(track.antigen)
meta.data  = left_join(x = novel.types, y = track.antigen, "day")
meta.data$day = as.character(meta.data$day)
days.of.emergence = meta.data$day
viral.fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
viral.fitness %>%
filter(day %in% days.of.emergence) %>%
mutate(day = as.character(day)) %>%
select(-simDay) %>%
filter(!duplicated(day)) -> viral.fitness.emergence
viral.fitness %>%
filter(day %in% days.of.emergence) %>%
mutate(day = as.character(day)) %>%
select(-simDay) %>%
filter(!duplicated(day)) -> viral.fitness.emergence
meta.data %>%
left_join(viral.fitness.emergence, by = "day") -> meta.data
tail(meta.data)
View(meta.data)
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
dominant.types <- find.dominant.types.at.emerge(antigen.frequencies)
tail(dominant.types)
dominant.types %>%
filter(day %in% days.of.emergence) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
meta.data %>%
left_join(dominant.types, by = "day") -> meta.data
maximum.freq.type <- find.max.frequency(antigen.frequencies)
tail(maximum.freq.type)
maximum.freq.type <- find.max.frequency(antigen.frequencies)
maximum.freq.type$antigentype = as.factor(maximum.freq.type$antigentype)
meta.data$postAntigen = as.factor(meta.data$postAntigen)
meta.data %>% left_join(maximum.freq.type, by = c("postAntigen" = "antigentype")) -> meta.data
tail(meta.data)
head(meta.data)
life.span <- calculate.total.life(antigen.frequencies)
tail(life.span)
life.span$antigentype = as.character(life.span$antigentype)
meta.data %>% left_join(life.span, by = c("postAntigen" = "antigentype")) -> meta.data
head(meta.data)
tail(meta.data)
meta.data %>%
mutate(success = ifelse((final.max > .1 & life.length > 180), "yes", "no")) -> meta.data
tail(meta.data)
head(meta.data)
tropics.output.folder = "../data/tropics/"
north.output.folder = "../data/north/"
timeseries.all = read.outputfiles(tropics.output.folder, "/out.timeseries.txt")
source('analysis_functions.R')
source('plotting_functions.R')
timeseries.all = read.outputfiles(tropics.output.folder, "/out.timeseries.txt")
north.timeseries = read.outputfiles(north.output.folder, "/out.timeseries.txt")
total.timeseries = rbind(timeseries.all, north.timeseries, idcol = "source")
head(north.timeseries)
head(timeseries.all)
timeseries.all %>%
gather(key = metric, value = value, -.id, -date) %>%
filter(metric == "totalI") %>%
ggplot(aes(x = date, y = value, group = .id, color = .id)) +
geom_line(size = 1.5)+
facet_wrap(~.id) +
guides(color = FALSE)
timeseries.all %>%
gather(key = metric, value = value, -.id, -date) %>%
filter(metric == "totalI") %>%
ggplot(aes(x = date, y = value, group = .id, color = .id)) +
geom_line(size = 1.5)+
facet_wrap(~.id, scales = "free") +
guides(color = FALSE)
timeseries.all %>%
gather(key = metric, value = value, -.id, -date) %>%
filter(metric == "totalI") %>%
ggplot(aes(x = date, y = value*.0025, group = .id, color = .id)) +
geom_line(size = 1.5)+
facet_wrap(~.id, scales = "free") +
guides(color = FALSE)
north.timeseries %>%
gather(key = metric, value = value, -.id, -date) %>%
filter(metric == "totalI") %>%
ggplot(aes(x = date, y = value*.0025, group = .id, color = .id)) +
geom_line(size = 1.5)+
facet_wrap(~.id, scales = "free") +
guides(color = FALSE)
emergence.data = create.meta.data.all(dir = output.folder)
tropics.folder = "../data/tropics/"
north.folder = "../data/north/"
emergence.data = create.meta.data.all(dir = tropics.folder)
View(emergence.data)
emergence.data[which(is.na(emergence.data$success)),]
north.data = create.meta.data.all(dir = north.folder)
north.data[which(is.na(north.data$success)),]
clean.console
console.file = paste0(north.folder, "north_4/out.console.txt")
output.file <- read.table(paste0(dir,.file, "/out.console.txt"), header = TRUE, fill = TRUE)
console.file
output.file = console.file
na.rows = output.file[is.na(output.file$postAntigen),]
output.file = read.table(console.file, header = TRUE, fill = TRUE)
head(output.file)
na.rows = output.file[is.na(output.file$postAntigen),]
na.rows
output.file = outputfile[1:(nrow(output.file)-2), ]
output.file = output.file[1:(nrow(output.file)-2), ]
na.rows = output.file[is.na(output.file$postAntigen),]
na.rows
na.indicies = which(is.na(output.file$postAntigen))
na.indicies
modified.rows = output.file[na.indices-1,]
na.indicies = which(is.na(output.file$postAntigen))
modified.rows = output.file[na.indicies-1,]
modified.rows
for(i in 1:length(na.indices)) {
index = na.indices[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
for(i in 1:length(na.indicies)) {
index = na.indicies[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
output.file = output.file[-(na.indicies-1), ]
View(output.file)
clean.console <- function(console.file) {
output.file = output.file[1:(nrow(output.file)-2), ]
na.rows = output.file[is.na(output.file$postAntigen),]
na.indicies = which(is.na(output.file$postAntigen))
modified.rows = output.file[na.indicies-1,]
for(i in 1:length(na.indicies)) {
index = na.indicies[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
output.file = output.file[-(na.indicies-1), ]
return(output.file)
}
emergence.data = create.meta.data.all(dir = tropics.folder)
north.data = create.meta.data.all(dir = north.folder)
tropics.antigen.frequencies <- read.outputfiles(output.folder, "/out.antigenFrequencies.txt")
north.antigen.frequencies <- read.outputfiles(north.folder, "/out.antigenFrequencies.txt")
tropics.antigen.frequencies <- read.outputfiles(tropics.folder, "/out.antigenFrequencies.txt")
antigen.specific.metrics <- c("distance", "mutLoad", "antigenicTypes", "dominant.freq")
emergence.data %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> emergence.antigenspecific.l
north.data.N %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> N.emergence.antigenspecific.l
north.data %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> N.emergence.antigenspecific.l
N.emergence.antigenspecific.l$value = as.numeric(N.emergence.antigenspecific.l$value)
emergence.antigenspecific.l$source = "tropics"
N.emergence.antigenspecific.l$source = "north"
emergence.data.l = rbind(emergence.antigenspecific.l,  N.emergence.antigenspecific.l)
emergence.data.l %>%
select(life.length, final.max, success, source) %>%
ggplot(aes(x = life.length, y = final.max, color = success)) + geom_point() +
facet_wrap(~source) +
scale_color_manual(values = c("purple", "orange")) + geom_vline(xintercept = 180) + geom_hline(yintercept = .1)
emergence.data.l %>%
select(life.length, final.max, success, source) %>%
ggplot(aes(x = life.length, y = final.max, color = success)) + geom_point() +
facet_wrap(~source) +
scale_color_manual(values = c("purple", "orange")) + geom_vline(xintercept = 180) + geom_hline(yintercept = .1)
which(is.na(emergence.data.l$success))
emergence.data.l[which(is.na(emergence.data.l$success)),]
source('analysis_functions.R')
tropics.folder = "../data/tropics/"
north.folder = "../data/north/"
emergence.data = create.meta.data.all(dir = tropics.folder)
north.data = create.meta.data.all(dir = north.folder)
which(is.na(emergence.data$success))
View(emergence.data)
emergence.data[which(is.na(emergence.data$success)),]
output.file = read.table(paste0(tropics.folder, "tropics_8/out.console.txt"), header = TRUE, fill = TRUE)
head(output.file)
View(output.file)
output.file = read.table(paste0(tropics.folder, "tropics_8/out.console.txt"), header = TRUE)
output.file = read.table(paste0(tropics.folder, "tropics_8/out.console.txt"), header = TRUE, fill = TRUE)
View(output.file)
tail(output.file)
output.file[7148:7149,]
na.rows = output.file[is.na(output.file$postAntigen),]
na.rows
output.file = output.file[1:(nrow(output.file)-2), ]
na.rows = output.file[is.na(output.file$postAntigen),]
na.indicies = which(is.na(output.file$postAntigen))
modified.rows = output.file[na.indicies-1,]
for(i in 1:length(na.indicies)) {
index = na.indicies[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
output.file = output.file[-(na.indicies-1), ]
na.rows = output.file[is.na(output.file$postAntigen),]
output.file = read.table(paste0(tropics.folder, "tropics_4/out.console.txt"), header = TRUE, fill = TRUE)
clean.console <- function(console.file) {
output.file = output.file[1:(nrow(output.file)-2), ]
na.rows = output.file[is.na(output.file$postAntigen),]
na.indicies = which(is.na(output.file$postAntigen))
modified.rows = output.file[na.indicies-1,]
for(i in 1:length(na.indicies)) {
index = na.indicies[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
output.file = output.file[-(na.indicies-1), ]
return(output.file)
}
output.file = clean.console(output.file)
na.rows = output.file[is.na(output.file$postAntigen),]
read.console.files <- function(dir) {
file.list = list.dirs(dir, full.names = FALSE, recursive = FALSE)
population.data <- lapply(file.list, function(.file) {
output.file <- read.table(paste0(dir,.file, "/out.console.txt"), header = TRUE, fill = TRUE)
# Clean console file here
output.file = clean.console(output.file)
return(output.file)
})
names(population.data) = file.list
#population.data = rbindlist(population.data, idcol = TRUE)
return(population.data)
}
read.console.files <- function(dir) {
file.list = list.dirs(dir, full.names = FALSE, recursive = FALSE)
population.data <- lapply(file.list, function(.file) {
output.file <- read.table(paste0(dir,.file, "/out.console.txt"), header = TRUE, fill = TRUE)
# Clean console file here
output.file = clean.console(output.file)
return(output.file)
})
names(population.data) = file.list
#population.data = rbindlist(population.data, idcol = TRUE)
return(population.data)
}
emergence.data = create.meta.data.all(dir = tropics.folder)
which(is.na(emergence.data$success))
View(emergence.data)
emergence.data[33287,]
output.file
output.file = read.table(paste0(tropics.folder, "tropics_4/out.console.txt"), header = TRUE, fill = TRUE)
output.file = clean.console(output.file)
which(is.na(output.file$postAntigen))
View(emergence.data)
View(output.file)
read.console.files <- function(dir) {
file.list = list.dirs(dir, full.names = FALSE, recursive = FALSE)
population.data <- lapply(file.list, function(.file) {
output.file <- read.table(paste0(dir,.file, "/out.console.txt"), header = TRUE, fill = TRUE)
# Clean console file here
output.file = clean.console(output.file)
return(output.file)
})
names(population.data) = file.list
#population.data = rbindlist(population.data, idcol = TRUE)
return(population.data)
}
create.meta.data <- function(sim.dir) {
### Combines all the output files for novel antigens
# reading in and cleaning up the console file
console.file <- read.table(paste0(sim.dir, "/out.console.txt"), header = TRUE, fill = TRUE)
console.file = clean.console(console.file)
# find the time when novel antigens emerge
novel.types = find.antigen.emergence(console.file)
# read in output file that tracks state of simulation when antigens emerge
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen$day = as.character(track.antigen$day)
novel.types$day = as.character(novel.types$day)
meta.data  = left_join(x = novel.types, y = track.antigen, "day")
meta.data$day = as.character(meta.data$day)
# record the exact days when new novel types are generated
days.of.emergence = meta.data$day
## Read in viral fitness, select on the days that correspond to emergence
viral.fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
viral.fitness %>%
filter(day %in% days.of.emergence) %>%
mutate(day = as.character(day)) %>%
select(-simDay) %>%
filter(!duplicated(day)) -> viral.fitness.emergence
meta.data %>%
left_join(viral.fitness.emergence, by = "day") -> meta.data
## combine dominant frequency circulating at time of emergence
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
dominant.types <- find.dominant.types.at.emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% days.of.emergence) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
meta.data %>%
left_join(dominant.types, by = "day") -> meta.data
# combine maximum frequency the strain itself ever achieved
maximum.freq.type <- find.max.frequency(antigen.frequencies)
maximum.freq.type$antigentype = as.factor(maximum.freq.type$antigentype)
meta.data$postAntigen = as.factor(meta.data$postAntigen)
meta.data %>% left_join(maximum.freq.type, by = c("postAntigen" = "antigentype")) -> meta.data
life.span <- calculate.total.life(antigen.frequencies)
life.span$antigentype = as.character(life.span$antigentype)
meta.data %>% left_join(life.span, by = c("postAntigen" = "antigentype")) -> meta.data
# Differentiate whether it was sucessful or not
#meta.data$success = NA
#successful.types = find.successful.types(antigen.frequencies, threshold = .1, length = 180)
meta.data %>%
mutate(success = ifelse((final.max > .1 & life.length > 180), "yes", "no")) -> meta.data
return(meta.data)
}
create.meta.data.all <- function(dir) {
file.list = list.dirs(dir, full.names = FALSE, recursive = FALSE)
population.data <- lapply(file.list, function(.file) {
meta.data = create.meta.data(paste0(dir, sim.dir = .file))
return(meta.data)
})
names(population.data) = file.list
population.data = rbindlist(population.data, idcol = TRUE)
return(population.data)
}
emergence.data = create.meta.data.all(dir = tropics.folder)
emergence.data = create.meta.data.all(dir = tropics.folder)
clean.console <- function(console.file) {
output.file = output.file[1:(nrow(output.file)-2), ]
na.rows = output.file[is.na(output.file$postAntigen),]
na.indicies = which(is.na(output.file$postAntigen))
modified.rows = output.file[na.indicies-1,]
if (length(na.indicies)>0) {
for(i in 1:length(na.indicies)) {
index = na.indicies[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
output.file = output.file[-(na.indicies-1), ]
}
return(output.file)
}
emergence.data = create.meta.data.all(dir = tropics.folder)
which(is.na(emergence.data$success))
View(emergence.data)
clean.console <- function(console.file) {
output.file = console.file[1:(nrow(console.file)-2), ]
na.rows = output.file[is.na(output.file$postAntigen),]
na.indicies = which(is.na(output.file$postAntigen))
modified.rows = output.file[na.indicies-1,]
if (length(na.indicies)>0) {
for(i in 1:length(na.indicies)) {
index = na.indicies[i]
output.file[index, 2:6] = unname(na.rows[i,1:5])
output.file[index, 1] = modified.rows[i,6]
distance =  na.rows[i, 3]
output.file[index, 4] = as.character(distance)
output.file[index, 1] = modified.rows[i,6]
}
output.file = output.file[-(na.indicies-1), ]
}
return(output.file)
}
emergence.data = create.meta.data.all(dir = tropics.folder)
View(emergence.data)
which(is.na(emergence.data$success))
north.data = create.meta.data.all(dir = north.folder)
which(is.na(north.data$success))
tropics.antigen.frequencies <- read.outputfiles(tropics.folder, "/out.antigenFrequencies.txt")
north.antigen.frequencies <- read.outputfiles(north.folder, "/out.antigenFrequencies.txt")
emergence.data %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> emergence.antigenspecific.l
north.data %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> N.emergence.antigenspecific.l
antigen.specific.metrics <- c("distance", "mutLoad", "antigenicTypes", "dominant.freq")
emergence.data %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> emergence.antigenspecific.l
north.data %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> N.emergence.antigenspecific.l
N.emergence.antigenspecific.l$value = as.numeric(N.emergence.antigenspecific.l$value)
emergence.antigenspecific.l$source = "tropics"
N.emergence.antigenspecific.l$source = "north"
emergence.data.l = rbind(emergence.antigenspecific.l,  N.emergence.antigenspecific.l)
exploratory.figures = "../analysis/exploratory.figs/"
emergence.data.l %>%
select(life.length, final.max, success, source) %>%
ggplot(aes(x = life.length, y = final.max, color = success)) + geom_point() +
facet_wrap(~source) +
scale_color_manual(values = c("purple", "orange")) + geom_vline(xintercept = 180) + geom_hline(yintercept = .1)
emergence.data.l[which(is.na(emergence.data.l$success)),]
emergence.data.l %>%
select(-.id, -day, -oriAntigen, -N, -R, -cases, -simDay) %>%
gather(key = metric, value = value, -final.max, -life.length, -success, -postAntigen) %>%
filter(metric %in% antigen.specific.metrics) -> emergence.antigenspecific.l
emergence.antigenspecific.l$value = as.numeric(emergence.antigenspecific.l$value)
head(emergence.data.l)
emergence.data.l
head(emergence.data)
emergence.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
library(plyr)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(scales)
library(reshape2)
library(data.table)
library(RColorBrewer)
library(broom)
emergence.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set.my.colors(max.color)
source('~/Documents/projects/fluantigen/analysis/analysis_functions.R', echo=TRUE)
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set.my.colors(max.color)
source('plotting_functions.R')
myColors = set.my.colors(max.color)
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
desired.trials = c("north1", "north12", "north14", "north2", "north16")
tropics.life.spans = calculate.life.spans(ant.freq.success.l)
antigen.freq.long %>%
mutate(year = day/365) %>%
filter(frequency > 0) %>%
ggplot(aes(x = year, y = frequency, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
#facet_wrap(~.id) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE)
antigen.freq.success.df %>%
mutate(year = day/365) %>%
filter(frequency > 0) %>%
ggplot(aes(x = year, y = frequency, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
#facet_wrap(~.id) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE)
ant.freq.success.l %>%
mutate(year = day/365) %>%
filter(frequency > 0) %>%
ggplot(aes(x = year, y = frequency, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
#facet_wrap(~.id) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE)
