})
names(freq.data) = correct.trials
freq.data2 = freq.data[-which(sapply(freq.data, is.null))]
freq.data.all = rbindlist(freq.data2, idcol = TRUE)
return(freq.data.all)
}
tropics.correct.trials = unique(tropics.data.tidy$.id)
data.freq.two.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .02, tidy.data = tropics.data.tidy, type = "no")
data.freq.two.yes = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .02, tidy.data = tropics.data.tidy, type = "yes")
warnings()
data.freq.two.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, tidy.data = tropics.data.tidy, type = "no")
colnames(tropics.data)
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > .02) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tropics.data.tidy
View(tropics.data.tidy)
find_data_at_freq_all <- function(dir, correct.trials, tidy.data, surveillance.freq, type) {
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
return(meta.data)
})
names(freq.data) = correct.trials
freq.data2 = freq.data[-which(sapply(freq.data, is.null))]
freq.data.all = rbindlist(freq.data2, idcol = TRUE)
return(freq.data.all)
}
find_data_at_freq_all <- function(dir, correct.trials, meta.data, surveillance.freq, type) {
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
return(meta.data)
})
names(freq.data) = correct.trials
freq.data2 = freq.data[-which(sapply(freq.data, is.null))]
freq.data.all = rbindlist(freq.data2, idcol = TRUE)
return(freq.data.all)
}
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
find_data_at_freq <- function(sim.dir, trial.meta.data, surveillance.freq, type) {
# filter data to look at either successful or unsuccesful depending on desire
browser()
trial.meta.data %>%
filter(success == eval(type)) %>%
distinct(postAntigen) -> selected.antigens
# read in and extract information from antigen.frequencies
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
# First Day that antigen is above surveillance threshold
day.freq.selected = adply(.data = selected.antigens, .margins = 1, function(antigen) {
antigen.frequencies %>%
filter(antigentype == antigen$postAntigen) %>%
filter(frequency > surveillance.freq) %>%
summarize(first.day = min(day))
})
# select just those post antigens that ever reach the surveillance frequency
if(type == "no") {
day.freq.selected %>%
filter(!is.na(first.day)) -> day.freq.selected
}
if(nrow(day.freq.selected) ==0) {
return()
} else {
# read in and extract from the viral fitness
fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
fit.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
fitness %>%
filter(day == antigen$first.day) %>%
select(-day) -> state
antigen.state = cbind(antigen, state)
})
# read in and extract from the timeseries
timeseries = read.table(paste0(sim.dir, "/out.timeseries.txt"), header = TRUE)
# Gonna need the timeseries modifications in here
timeseries.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
timeseries %>%
mutate(day.difference = date*365-antigen$first.day) %>%
filter(abs(day.difference) <= 5) %>% # helps link up the date and day
select(1:11)
})
left_join(
fit.summary, timeseries.summary, by = c("postAntigen", "first.day"))  -> full.freq.summary
full.freq.summary$first.day = as.character(full.freq.summary$first.day)
## find dominant type
dominant.types <- find_dominant_types_at_emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% full.freq.summary$first.day) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
full.freq.summary %>%
left_join(dominant.types, by = c("first.day" = "day")) -> full.freq.summary
# read in and extract track antigen closest to that day
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
track.antigen %>%
mutate(day.difference = abs(day-antigen$first.day)) %>%
filter(day.difference == min(day.difference)) %>%
select(1, 12:14) -> track.antigen.summary
return(track.antigen.summary)
})
### find the closest to the day
track.antigen.summary$first.day = as.character(track.antigen.summary$first.day)
full.freq.summary %>%
left_join(track.antigen.summary, by = c("first.day", "postAntigen")) -> full.freq.summary
colnames(full.freq.summary)[2] = "day"
return(full.freq.summary)
}
}
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
View(selected.antigens)
View(trial.meta.data)
View(selected.antigens)
View(trial.meta.data)
View(day.freq.selected)
View(full.freq.summary)
View(trial.meta.data)
find_data_at_freq_all <- function(dir, correct.trials, meta.data, surveillance.freq, type) {
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
return(meta.data)
})
browser()
names(freq.data) = correct.trials
freq.data2 = freq.data[-which(sapply(freq.data, is.null))]
freq.data.all = rbindlist(freq.data2, idcol = TRUE)
return(freq.data.all)
}
find_data_at_freq <- function(sim.dir, trial.meta.data, surveillance.freq, type) {
# filter data to look at either successful or unsuccesful depending on desire
browser()
trial.meta.data %>%
filter(success == eval(type)) %>%
distinct(postAntigen) -> selected.antigens
# read in and extract information from antigen.frequencies
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
# First Day that antigen is above surveillance threshold
day.freq.selected = adply(.data = selected.antigens, .margins = 1, function(antigen) {
antigen.frequencies %>%
filter(antigentype == antigen$postAntigen) %>%
filter(frequency > surveillance.freq) %>%
summarize(first.day = min(day))
})
# If there are no antigens that reached threshold but were not successful, move on
if(nrow(day.freq.selected) ==0) {
return()
} else {
# read in and extract from the viral fitness
fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
fit.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
fitness %>%
filter(day == antigen$first.day) %>%
select(-day) -> state
antigen.state = cbind(antigen, state)
})
# read in and extract from the timeseries
timeseries = read.table(paste0(sim.dir, "/out.timeseries.txt"), header = TRUE)
# Gonna need the timeseries modifications in here
timeseries.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
timeseries %>%
mutate(day.difference = date*365-antigen$first.day) %>%
filter(abs(day.difference) <= 5) %>% # helps link up the date and day
select(1:11)
})
left_join(
fit.summary, timeseries.summary, by = c("postAntigen", "first.day"))  -> full.freq.summary
full.freq.summary$first.day = as.character(full.freq.summary$first.day)
## find dominant type
dominant.types <- find_dominant_types_at_emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% full.freq.summary$first.day) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
full.freq.summary %>%
left_join(dominant.types, by = c("first.day" = "day")) -> full.freq.summary
# read in and extract track antigen closest to that day
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
track.antigen %>%
mutate(day.difference = abs(day-antigen$first.day)) %>%
filter(day.difference == min(day.difference)) %>%
select(1, 12:14) -> track.antigen.summary
return(track.antigen.summary)
})
### find the closest to the day
track.antigen.summary$first.day = as.character(track.antigen.summary$first.day)
full.freq.summary %>%
left_join(track.antigen.summary, by = c("first.day", "postAntigen")) -> full.freq.summary
colnames(full.freq.summary)[2] = "day"
return(full.freq.summary)
}
}
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
find_data_at_freq <- function(sim.dir, trial.meta.data, surveillance.freq, type) {
# filter data to look at either successful or unsuccesful depending on desire
trial.meta.data %>%
filter(success == eval(type)) %>%
distinct(postAntigen) -> selected.antigens
# read in and extract information from antigen.frequencies
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
# First Day that antigen is above surveillance threshold
day.freq.selected = adply(.data = selected.antigens, .margins = 1, function(antigen) {
antigen.frequencies %>%
filter(antigentype == antigen$postAntigen) %>%
filter(frequency > surveillance.freq) %>%
summarize(first.day = min(day))
})
# If there are no antigens that reached threshold but were not successful, move on
if(nrow(day.freq.selected) ==0) {
return()
} else {
# read in and extract from the viral fitness
fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
fit.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
fitness %>%
filter(day == antigen$first.day) %>%
select(-day) -> state
antigen.state = cbind(antigen, state)
})
# read in and extract from the timeseries
timeseries = read.table(paste0(sim.dir, "/out.timeseries.txt"), header = TRUE)
# Gonna need the timeseries modifications in here
timeseries.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
timeseries %>%
mutate(day.difference = date*365-antigen$first.day) %>%
filter(abs(day.difference) <= 5) %>% # helps link up the date and day
select(1:11)
})
left_join(
fit.summary, timeseries.summary, by = c("postAntigen", "first.day"))  -> full.freq.summary
full.freq.summary$first.day = as.character(full.freq.summary$first.day)
## find dominant type
dominant.types <- find_dominant_types_at_emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% full.freq.summary$first.day) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
full.freq.summary %>%
left_join(dominant.types, by = c("first.day" = "day")) -> full.freq.summary
# read in and extract track antigen closest to that day
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
track.antigen %>%
mutate(day.difference = abs(day-antigen$first.day)) %>%
filter(day.difference == min(day.difference)) %>%
select(1, 12:14) -> track.antigen.summary
return(track.antigen.summary)
})
### find the closest to the day
track.antigen.summary$first.day = as.character(track.antigen.summary$first.day)
full.freq.summary %>%
left_join(track.antigen.summary, by = c("first.day", "postAntigen")) -> full.freq.summary
colnames(full.freq.summary)[2] = "day"
return(full.freq.summary)
}
}
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
find_data_at_freq_all <- function(dir, correct.trials, meta.data, surveillance.freq, type) {
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
return(meta.data)
})
browser()
return(freq.data)
#empty.lists=which(freq.data,is.null)
#freq.data2 = freq.data[-which(sapply(freq.data, is.null))]
#freq.data.all = rbindlist(freq.data2, idcol = TRUE)
#return(freq.data.all)
}
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
empty.lists=which(data.freq.five.no,is.null)
empty.lists=which(sapply(data.freq.five.no,is.null)
empty.lists=which(sapply(data.freq.five.no,is.null))
is.null(data.freq.five[[1]])
is.null(data.freq.five.no[[1]])
is.null(data.freq.five.no[1])
is.null(empty.lists)
length(empty.lists)
find_data_at_freq_all <- function(dir, correct.trials, meta.data, surveillance.freq, type) {
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
return(meta.data)
})
empty.lists=which(freq.data,is.null)
if(length(empty.lists > 0)) {
freq.data = freq.data[-empty.lists]
}
freq.data.all = rbindlist(freq.data, idcol = TRUE)
return(freq.data.all)
}
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
data.freq.five.yes = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, tidy.data = tropics.data.tidy, type = "yes")
data.freq.five.yes = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "yes")
data.freq.five.yes = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "yes")
find_data_at_freq_all <- function(dir, correct.trials, meta.data, surveillance.freq, type) {
tropics.data %>%
select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
return(meta.data)
})
empty.lists=which(sapply(freq.data,is.null))
if(length(empty.lists > 0)) {
freq.data = freq.data[-empty.lists]
}
freq.data.all = rbindlist(freq.data, idcol = TRUE)
return(freq.data.all)
}
data.freq.five.yes = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "yes")
data.freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
colnames(data.freq.five.no)
freq.five = rbind(data.frame(success = "no", data.freq.two.no),
data.frame(success = "yes", data.freq.two.yes))
freq.five = rbind(data.frame(success = "no", data.freq.five.no),
data.frame(success = "yes", data.freq.five.yes))
View(freq.five)
tropics.data %>%
group_by(.id) %>%
summarize(max.I = max(max.I),
min.I = min(min.I)) -> summary.tropics
normalize_infection
normalize_infection <- function(meta.data, infected.range) {
meta.data %>%
left_join(tropics.infected.range) %>%
mutate(normalize.I = (infected-min.I)/(max.I-min.I)) -> meta.data
return(meta.data)
}
head(freq.five)
str(freq.five)
freq.five = rbind(data.frame(success = "yes", data.freq.five.yes),
data.frame(success = "no", data.freq.five.no))
contrasts(freq.five$success)
contrasts(freq.five$.id)
freq.five$.id = as.factor(freq.five$.id)
contrasts(freq.five$.id)
set.seed(1234)
outcomeName = "success"
splitIndex <- createDataPartition(freq.five[,outcomeName], p = .80, list = FALSE, times = 1)
splitIndex
train <- freq.five[ splitIndex,]
test  <- freq.five[-splitIndex,]
View(test)
model <- glm(success~., family = binomial(link = 'logit'), data = train)
summary(model)
str(freq.five)
excluded = c("postAntigen", "day", "simDay", "date", "totalN", "totalR", "totalCases", "dominant.type", "day.1")
variableNames = colnames(freq.five)
variableNames
excluded = c("postAntigen", "day", "simDay", "date", "totalN", "totalR", "totalCases", "dominant.type", "day.1")
freqfivesub = freq.five[, -which(predictor.names%in%excluded)]
freqfivesub = freq.five[, -which(variableNames%in%excluded)]
outcomeName = "success"
splitIndex <- createDataPartition(freqfivesub[,outcomeName], p = .80, list = FALSE, times = 1)
train <- freq.five[ splitIndex,]
test  <- freq.five[-splitIndex,]
model <- glm(success~., family = binomial(link = 'logit'), data = train)
summary(model)
str(freqfivesub)
train <- freqfivesub[ splitIndex,]
test  <- freqfivesub[-splitIndex,]
model <- glm(success~., family = binomial(link = 'logit'), data = train)
summary(model)
freq.five$totalI=as.numeric(freq.five$totalI)
freqfivesub = freq.five[, -which(variableNames%in%excluded)]
str(freqfivesub)
freqfivesub = freq.five[, -which(variableNames%in%excluded)]
outcomeName = "success"
splitIndex <- createDataPartition(freqfivesub[,outcomeName], p = .80, list = FALSE, times = 1)
train <- freqfivesub[ splitIndex,]
test  <- freqfivesub[-splitIndex,]
model <- glm(success~., family = binomial(link = 'logit'), data = train)
summary(model)
str(freqfivesub)
excluded = c("postAntigen", "day", "simDay", "date", "totalN", "totalR", "totalI", "totalCases", "dominant.type", "day.1")
freqfivesub = freq.five[, -which(variableNames%in%excluded)]
outcomeName = "success"
splitIndex <- createDataPartition(freqfivesub[,outcomeName], p = .80, list = FALSE, times = 1)
freqfivesub = freq.five[, -which(variableNames%in%excluded)]str(freqfivesub)
outcomeName = "success"
splitIndex <- createDataPartition(freqfivesub[,outcomeName], p = .80, list = FALSE, times = 1)
train <- freqfivesub[ splitIndex,]
test  <- freqfivesub[-splitIndex,]
model <- glm(success~., family = binomial(link = 'logit'), data = train)
summary(model)
anova(model, test="Chisq")
library(pscl)
install.packages('pscl', dependencies = TRUE)
library(pscl)
pR2(model)
fittedResults <- predict(model, newdata = test, type = 'response')
head(test)
fittedResults <- predict(model, newdata = test[,-1], type = 'response')
fittedResults
fittedResults <- ifelse(fitted.results > 0.5,1,0)
fittedResults <- ifelse(fittedResults > 0.5,1,0)
misClasificError <- mean(fittedResults != test[,1])
fittedResult
fittedResults
fittedResults
test$success
ifelse(test$success == "yes",1,0)
test$success = ifelse(test$success == "yes",1,0)
misClasificError <- mean(fittedResults != test[,1])
print(paste('Accuracy', 1-misClasificError))
library(ROCR)
p <- predict(model, newdata = subset(test[,-1]), type = "resonse")
p <- predict(model, newdata = subset(test[,-1]), type = "repsonse")
p <- predict(model, newdata = subset(test[,-1]), type = "response")
pr <- prediction(p, test$success)
pr
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
create_meta_data_all
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
tropics.folder = "../data/tropics/"
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
rm(list=ls())
source('analysis_functions.R')
source('plotting_functions.R')
tropics.folder = "../data/tropics/"
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
