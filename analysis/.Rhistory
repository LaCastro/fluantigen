scale_x_continuous(breaks = seq(1:20))-> time.series
time.series
tropics.data = create_meta_data(sim.dir = paste0(tropics.folder, trial))
thres = .2
tropics.antigen.frequencies = read_outputfiles(tropics.folder, "/out.antigenFrequencies.txt")
days.above.thres = calculate_days_above_thres(tropics.antigen.frequencies, threshold = thres)
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype", ".id" = ".id")) -> tropics.data
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype")) -> tropics.data
already_lost = which(is.na(tropics.data$days.above))
tropics.data$days.above[already_lost] = 0
tropics.data %>%
mutate(success = ifelse(days.above > 45, "yes", "no")) -> tropics.data
tropics.data %>%
filter(success == "yes") %>%
select(postAntigen) -> success.types
tropics.antigen.frequencies <- read.table(paste0(tropics.folder, trial, "/out.antigenFrequencies.txt"), header = TRUE)
tropics.antigen.frequencies %>%
filter(antigentype %in% success.types$postAntigen | antigentype == 0) -> antigen.freq.sim
num.transitions = unique(antigen.freq.sim$antigentype)
myColors = colorRampPalette(brewer.pal(8, "Accent"))(length(num.transitions))
antigen.freq.sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
antigen.freq.long$antigentype = as.factor(antigen.freq.long$antigentype)
antigen.freq.long %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency) %>% #*.0025
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Infected", x = "Year")  +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE) -> prev.plot
prev.plot
if(variable.set == "timeSeries") {
variables = timeseries
col.names = c(".id", "totalS","netau")
} else if(variable.set == "trackAntigen") {
variables = trackAntigen
col.names = c(".id", "antigenicDiversity", "antigenicTypes", "diversity", "meanLoad", "tmrca")
} else if(variable.set == "viralFitness") {
variables = viralFitness
col.names = c("covBetaSigma", "meanBeta", "meanR", "meanSigma",
"varBeta", "varR", "varSigma")
}
trackAntigen
variables %>%
gather(key = variable, value = value, -.id, -day) %>%
filter(variable %in% col.names) %>%
filter(.id == trial) %>%
ggplot(aes(x=day/365, y = value)) +
geom_line()+facet_wrap(~variable, nrow = ifelse(variable.set == "timeseries", 2,3), scales = "free") +
labs(x = "Year") +
scale_x_continuous(breaks = seq(1:10)) +
theme(text = element_text(size = 8),
axis.text = element_text(size = 8)) -> variable.plot
first.column <- plot_grid(time.series, prev.plot, nrow = 2)
plot_grid(first.column, variable.plot, rel_widths = c(.9, 1.1))
rm(list=ls())
source('analysis_functions.R')
source('plotting_functions.R')
library(plyr)
library(tidyverse)
library(ggplot2)
library(cowplot)
library(scales)
library(reshape2)
library(data.table)
library(RColorBrewer)
library(broom)
find_data_at_freq <- function(sim.dir, trial.meta.data, surveillance.freq, type) {
# filter data to look at either successful or unsuccesful depending on desire
trial.meta.data %>%
filter(success == eval(type)) %>%
distinct(postAntigen) -> selected.antigens
# read in and extract information from antigen.frequencies
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
# First Day that antigen is above surveillance threshold
day.freq.selected = adply(.data = selected.antigens, .margins = 1, function(antigen) {
antigen.frequencies %>%
filter(antigentype == antigen$postAntigen) %>%
filter(frequency > surveillance.freq) %>%
summarize(first.day = min(day))
})
# If there are no antigens that reached threshold but were not successful, move on
if(nrow(day.freq.selected) ==0) {
return()
} else {
# read in and extract from the viral fitness
fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
fit.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
fitness %>%
filter(day == antigen$first.day) %>%
dplyr::select(-day) -> state
antigen.state = cbind(antigen, state)
})
# read in and extract from the timeseries
timeseries = read.table(paste0(sim.dir, "/out.timeseries.txt"), header = TRUE)
# Gonna need the timeseries modifications in here
timeseries.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
timeseries %>%
mutate(day.difference = date*365-antigen$first.day) %>%
filter(abs(day.difference) <= 5) %>% # helps link up the date and day
dplyr::select(1:11)
})
left_join(
fit.summary, timeseries.summary, by = c("postAntigen", "first.day"))  -> full.freq.summary
full.freq.summary$first.day = as.character(full.freq.summary$first.day)
## find dominant type
dominant.types <- find_dominant_types_at_emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% full.freq.summary$first.day) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
full.freq.summary %>%
left_join(dominant.types, by = c("first.day" = "day")) -> full.freq.summary
# read in and extract track antigen closest to that day
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen.summary = adply(.data = day.freq.selected, .margins = 1, function(antigen) {
track.antigen %>%
mutate(day.difference = abs(day-antigen$first.day)) %>%
filter(day.difference == min(day.difference)) %>%
dplyr::select(1, 12:14) -> track.antigen.summary
return(track.antigen.summary)
})
### find the closest to the day
track.antigen.summary$first.day = as.character(track.antigen.summary$first.day)
full.freq.summary %>%
left_join(track.antigen.summary, by = c("first.day", "postAntigen")) -> full.freq.summary
colnames(full.freq.summary)[2] = "day"
return(full.freq.summary)
}
}
find_data_at_freq_all <- function(dir, correct.trials, meta.data, surveillance.freq, type) {
tropics.data %>%
dplyr::select(-cases, -simDay, -dominant.type) %>%
filter(final.max > surveillance.freq) %>%
gather(key = metric, value = emergence.value, -.id, -postAntigen, -success) %>%
mutate(postAntigen = as.numeric(postAntigen)) %>%
arrange(postAntigen, .id) %>%
filter(metric != "N") -> tidy.data
freq.data <- lapply(correct.trials, function(trial) {
tidy.data %>%
filter(.id == trial) -> trial.tidy.data
meta.data = find_data_at_freq(sim.dir = paste0(dir,trial),
surveillance.freq = surveillance.freq,
trial.meta.data = trial.tidy.data,
type = type)
meta.data$.id = trial
return(meta.data)
})
empty.lists=which(sapply(freq.data,is.null))
if(length(empty.lists > 0)) {
freq.data = freq.data[-empty.lists]
}
freq.data.all = rbindlist(freq.data, fill = TRUE)
return(freq.data.all)
}
tropics.folder = "../data/tropics/"
tropics.data = create_meta_data_all(dir = tropics.folder)
tropics.timeseries = read_outputfiles(tropics.folder, "/out.timeseries.txt")
tropics.infected.range = calculate_max_infected(tropics.timeseries)
tropics.data = normalize_infection(meta.data = tropics.data, tropics.infected.range)
thres = .2
tropics.antigen.frequencies = read_outputfiles(tropics.folder, "/out.antigenFrequencies.txt")
days.above.thres = calculate_days_above_thres(tropics.antigen.frequencies, threshold = thres)
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype", ".id" = ".id")) -> tropics.data
already_lost = which(is.na(tropics.data$days.above))
tropics.data$days.above[already_lost] = 0
tropics.data %>%
mutate(success = ifelse(days.above > 45, "yes", "no")) -> tropics.data
tropics.data %>%
group_by(.id) %>%
summarize(max.I = max(max.I),
min.I = min(min.I)) -> summary.tropics
## have to make data tidy before this
tropics.correct.trials = unique(tropics.data$.id)
freq.five.no = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "no")
freq.five.yes = find_data_at_freq_all(dir = tropics.folder, correct.trials = tropics.correct.trials,
surveillance.freq = .05, meta.data = tropics.data, type = "yes")
freq.five = rbind(data.frame(success = "yes", freq.five.yes),
data.frame(success = "no", freq.five.no))
left_join(freq.five, summary.tropics) %>%
mutate(normalize.I = (infected-min.I)/(max.I-min.I)) -> freq.five
excluded = c("postAntigen", "day", "simDay", "date", "totalN", "totalR",
"totalCases", "dominant.type", "day.1")
predictorNames = colnames(freq.two)
outcomeName = "success"
predictorNames = colnames(freq.five)
excluded = c("postAntigen", "day.1", "simDay", "date", "totalN", "totalR",
"totalCases", "dominant.type", "totalI", "max.I", "min.I")
data = freq.five[, -which(predictorNames%in%excluded)]
str(data)
data <- within(data, {
success <- factor(success, levels=c("yes", "no"), labels = c(1,0))
.id <- factor(.id)
day <- as.numeric(as.character(day))
})
outcomeName = "success"
splitIndex <- createDataPartition(data[,outcomeName], p = .75, list = FALSE, times = 1)
library(caret)
library(pROC)
splitIndex <- createDataPartition(data[,outcomeName], p = .75, list = FALSE, times = 1)
trainDF <- data[ splitIndex,]
colnames(dataScaled)
dataScaled <- data
colnames(dataScaled)
dataScaled[,-c(1, 21)] <- lapply(dataScaled[,-c(1,21)],scale)
trainDF <- data[ splitIndex,]
testDF  <- data[-splitIndex,]
trial.all <- glmer(success~.-.id + (1|.id), data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
library(lme4)
trial.all <- glmer(success~.-.id + (1|.id), data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
head(trainDF)
trainDF <- dataScaled[ splitIndex,]
testDF  <- dataScaled[-splitIndex,]
head(trainDF)
trial.all <- glmer(success~.-.id + (1|.id), data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
vif.mer(trial.all)
vif.included = c("success", ".id", "diversity", "dominant.freq", "antigenicTypes", "serialInterval", "antigenicDiversity", "netau", "normalize.I", "meanLoad", "tmrca")
trainDF = dataScaled[splitIndex, which(colnames(dataScaled) %in% vif.included)]
modelnull = glmer(success ~ 1 + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(modelnull)
model1 <- glmer(success ~ meanLoad + (1|.id),
data = dataVif, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
model1 <- glmer(success ~ meanLoad + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
anova(modelnull,model1)
summary(model1)
model2 <- glmer(success ~ dominantFreq + (1|.id),
data = dataVif, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
model2 <- glmer(success ~ dominantFreq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
colnames(trainDF)
model2 <- glmer(success ~ dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
anova(model1, model2)
model2 <- glmer(success ~ diversity + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ tmrca + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ netau + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ serialInterval + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ antigenicDiversity + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ antigenicTypes + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
anova(model1, model2)
model2 <- glmer(success ~ normalize.I + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
anova(model1, model2)
anova(modelnull,model1)
model1 <- glmer(success ~ meanLoad + dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
model1 <- glmer(success ~ meanLoad + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
modelnull = model1
modelnull
model1 <- glmer(success ~ meanLoad + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model1)
modenull = model1
model1 <- glmer(success ~ meanLoad + dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
anova(modelnull, model1)
summary(model1)
model2 <- glmer(success ~ meanLoad + normalize.I + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
anova(model1, model2)
anova(modelnull, model1)
model2 <- glmer(success ~ meanLoad + antigenicTypes + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="b
obyqa"),nAGQ=10)
model2 <- glmer(success ~ meanLoad + antigenicTypes + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
anova(model1, model2)
anova(modelnull, model2)
model1 = model2
model2 <- glmer(success ~ meanLoad + diversity + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + tmrca + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + netau + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + serialInterval + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicDiversity + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
modelnull = model1
modelnull
model2 <- glmer(success ~ meanLoad + normalize.I + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model1 <- glmer(success ~ meanLoad + antigenicTypes + dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model1)
anova(modelnull, model1)
model2 <- glmer(success ~ meanLoad + antigenicTypes + normalize.I + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicTypes + diversity + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicTypes + tmrca + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicTypes + netau + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicTypes + serialInterval + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicTypes + antigenicDiversity + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model2 <- glmer(success ~ meanLoad + antigenicTypes + dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
modelnull
model2 <- glmer(success ~ meanLoad + antigenicTypes + normalize.I + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=1
model2 <- glmer(success ~ meanLoad + antigenicTypes + normalize.I + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model2)
model1
model1 <- glmer(success ~ (meanLoad + dominant.freq + antigenicTypes)^2 + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model1)
modelnull
modelnull = model1
modelnull
testDF
modelnull
model.predict = predict(modelnull, newdata = testDF, type = "response")
glmer.ROC <- roc(predictor=model.predict, response=testDF$success)
glmer.ROC$auc
plot(glmer.ROC)
plot(dataScaled$meanLoad, dataScaled$success, ylab = "Probability of Success")
head(dataScaled$success)
dataScaled$success
curve(model.predict)
model.predict
plot(modelnull)
binnedplot(fitted(modelnull),resid(modelnull))
install.packages("arm")
library(arm)
binnedplot(fitted(modelnull),resid(modelnull))
install.packages("sjp.glmer")
install.packages('sjPlot')
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
install.packages("sjPlot")
library(sjPlot)
installed.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
install.packages("tibble", dependencies = TRUE)
library(sjPlot)
library(sjmisc)
data(ef)
data(efc)
efc
View(efc)
set_theme(theme = "forest",
geom.label.size = 3,
axis.textsize = .9,
axis.title.size = .9)
library(lme4)
data("sleepstudy")
sleepstudy
View(sleepstudy)
sleepstudy$Reaction
dicho(sleepstudy$Reaction, dich.by = "median")
sleepstudy$Reaction.dicho <- dicho(sleepstudy$Reaction, dich.by = "median")
fit <- glmer(Reaction.dicho ~ Days + (Days | Subject),
sleepstudy, family = binomial("logit"))
summary(fit)
sjp.glmer(fit, y.offset = .4)
sjp.glmer(fit, y.offset = .4, sort.est = "Days")
efc$hi_qol <- dicho(efc$quol_5)
efc$grp = as.factor(efc$e15relat)
levels(x = efc$grp) <- get_labels(efc$e15relat)
mydf <- data.frame(hi_qol = efc$hi_qol,
sex = to_factor(efc$c161sex),
c12hour = efc$c12hour,
neg_c_7 = efc$neg_c_7,
grp = efc$grp)
fit2 <- glmer(hi_qol ~ sex + c12hour + neg_c_7 + (1 | grp),
data = mydf, family = binomial("logit"))
fit2
summary(fit2)
sjp.glmer(fit2, type = "fe")
sjp.glmer(modelnull, type = "fe")
modelnull
model1 <- glmer(success ~ meanLoad + antigenicTypes + dominant.freq + (1|.id),
data = trainDF, family = binomial,
control = glmerControl(optimizer="bobyqa"),nAGQ=10)
summary(model1)
modelnull = model1
model.predict = predict(modelnull, newdata = testDF, type = "response")
glmer.ROC <- roc(predictor=model.predict, response=testDF$success)
glmer.ROC$auc
library(pROC)
glmer.ROC <- roc(predictor=model.predict, response=testDF$success)
glmer.ROC$auc
plot(glmer.ROC)
sjp.glmer(modelnull, type = "fe")
plot(modelnull)
theme_bw()
library(ggplot2)
ggplot(data.frame(eta=predict(modelnull,type="link"),pearson=residuals(modelnull,type="pearson")),
aes(x=eta,y=pearson)) +
geom_point() +
theme_bw()
