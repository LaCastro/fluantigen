scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE)
ant.freq.success.l %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE)
thresholds = seq(.2,.5,.1)
days = seq(90,360,90)
tropics.timeseries = read_outputfiles(tropics.folder, "/out.timeseries.txt")
tropics.timeseries %>%
group_by(.id) %>%
mutate(ratio = totalI/totalS,
normalized.ratio = (ratio-min(ratio))/(max(ratio)-min(ratio)),
normalized.I = (totalI-min(totalI))/(max(totalI)-min(totalI)),
day = date*365) -> tropics.timeseries
tropics.timeseries %>%
ggplot(aes(x = day/365, y = totalI*.0025)) + geom_line() +
labs(x = "Year", y = "Infected", title = trial) +
facet_wrap(~.id, scales = "free") +
scale_x_continuous(breaks = seq(1:10))
tropics.timeseries %>%
ggplot(aes(x = day/365, y = totalI*.0025)) + geom_line() +
labs(x = "Year", y = "Infected") +
facet_wrap(~.id, scales = "free") +
scale_x_continuous(breaks = seq(1:10))
for(thres in thresholds) {
for(day in days) {
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
days.above.thres = calculate_days_above_thres(tropics.antigen.frequencies, threshold = thres)
days.above.thres$antigentype=as.character(days.above.thres$antigentype)
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype", ".id" = ".id")) -> tropics.data
already_lost = which(is.na(tropics.data$days.above))
tropics.data$days.above[already_lost] = 0
tropics.data %>%
mutate(success = ifelse(days.above > day, "yes", "no")) -> tropics.data
#### Plotting
# Antigen Dynamics
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set_my_colors(max.color)
## Need to first go in and fill all the missing values and then combine
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
ant.freq.success.l %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE) -> prev.plot
save_plot(filename = paste0("exploratory.figs/prev.day", day, "thres", thres,".pdf"), prev.plot,
base_height = 8, base_aspect_ratio = 1.6)
}
}
thresholds = seq(.05,.2,.05)
days = seq(45,180,45)
for(thres in thresholds) {
for(day in days) {
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
days.above.thres = calculate_days_above_thres(tropics.antigen.frequencies, threshold = thres)
days.above.thres$antigentype=as.character(days.above.thres$antigentype)
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype", ".id" = ".id")) -> tropics.data
already_lost = which(is.na(tropics.data$days.above))
tropics.data$days.above[already_lost] = 0
tropics.data %>%
mutate(success = ifelse(days.above > day, "yes", "no")) -> tropics.data
#### Plotting
# Antigen Dynamics
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set_my_colors(max.color)
## Need to first go in and fill all the missing values and then combine
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
ant.freq.success.l %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE) -> prev.plot
save_plot(filename = paste0("exploratory.figs/prev.day", day, "thres", thres,".pdf"), prev.plot,
base_height = 8, base_aspect_ratio = 1.6)
}
}
thresholds = seq(.01,.1,.02)
days = seq(30,90,10)
for(thres in thresholds) {
for(day in days) {
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
days.above.thres = calculate_days_above_thres(tropics.antigen.frequencies, threshold = thres)
days.above.thres$antigentype=as.character(days.above.thres$antigentype)
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype", ".id" = ".id")) -> tropics.data
already_lost = which(is.na(tropics.data$days.above))
tropics.data$days.above[already_lost] = 0
tropics.data %>%
mutate(success = ifelse(days.above > day, "yes", "no")) -> tropics.data
#### Plotting
# Antigen Dynamics
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set_my_colors(max.color)
## Need to first go in and fill all the missing values and then combine
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
ant.freq.success.l %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years") +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE) -> prev.plot
save_plot(filename = paste0("exploratory.figs/prev.day", day, "thres", thres,".pdf"), prev.plot,
base_height = 8, base_aspect_ratio = 1.6)
}
}
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
thres = .10
days.above.thres = calculate_days_above_thres(tropics.antigen.frequencies, threshold = thres)
days.above.thres
days.above.thres$antigentype=as.character(days.above.thres$antigentype)
Head(days.above.thres)
head(days.above.thres)
tropics.data %>% left_join(days.above.thres, by = c("postAntigen" = "antigentype", ".id" = ".id")) -> tropics.data
View(tropics.data)
tropics.data[,postAntigen == 94]
tropics.data[,"postAntigen" == 94]
which(tropics.data$postAntigen == 94)
tropics.data[94,]
already_lost = which(is.na(tropics.data$days.above))
tropics.data$days.above[already_lost] = 0
days.above
thres
day = 45
tropics.data %>%
mutate(success = ifelse(days.above > day, "yes", "no")) -> tropics.data
View(tropics.data)
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
success.types
head(tropics.antigen.frequencies)
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
View(antigen.freq.success.df)
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set_my_colors(max.color)
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
ant.freq.success.l %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency) %>%
#  filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years") +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE)
create_meta_data <- function(sim.dir, success.criteria) {
### Combines all the output files for novel antigens
# reading in and cleaning up the console file
console.file <- read.table(paste0(sim.dir, "/out.console.txt"), header = TRUE, fill = TRUE)
console.file = clean_console(console.file)
# find the time when novel antigens emerge
novel.types = find_antigen_emergence(console.file)
# read in output file that tracks state of simulation when antigens emerge
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen$day = as.character(track.antigen$day)
novel.types$day = as.character(novel.types$day)
meta.data  = left_join(x = novel.types, y = track.antigen, "day")
meta.data$day = as.character(meta.data$day)
# record the exact days when new novel types are generated
days.of.emergence = meta.data$day
## Read in viral fitness, select on the days that correspond to emergence
viral.fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
viral.fitness %>%
filter(day %in% days.of.emergence) %>%
mutate(day = as.character(day)) %>%
select(-simDay) %>%
filter(!duplicated(day)) -> viral.fitness.emergence
meta.data %>%
left_join(viral.fitness.emergence, by = "day") -> meta.data
## combine dominant frequency circulating at time of emergence
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
dominant.types <- find_dominant_types_at_emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% days.of.emergence) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
meta.data %>%
left_join(dominant.types, by = "day") -> meta.data
# combine maximum frequency the strain itself ever achieved
maximum.freq.type <- find_max_frequency(antigen.frequencies)
maximum.freq.type$antigentype = as.factor(maximum.freq.type$antigentype)
meta.data$postAntigen = as.factor(meta.data$postAntigen)
meta.data %>% left_join(maximum.freq.type, by = c("postAntigen" = "antigentype")) -> meta.data
life.span <- calculate_total_life(antigen.frequencies)
life.span$antigentype = as.character(life.span$antigentype)
meta.data %>% left_join(life.span, by = c("postAntigen" = "antigentype")) -> meta.data
# Differentiate whether it was sucessful or not
#days.above.thres = calculate_days_above_thres(antigen.frequencies, success.criteria$threshold)
#days.above.thres$antigentype = as.character(days.above.thres$antigentype)
#meta.data %>% left_join(days.above.threshold, by = c("postAntigen" = "antigentype")) -> meta.data
meta.data %>%
mutate(success = ifelse((final.max > success.criteria$freq & life.length > success.criteria$length.days), "yes", "no")) -> meta.data
return(meta.data)
}
tropics.antigen.frequencies <- read_outputfiles(tropics.folder, "/out.antigenFrequencies.txt")
success.criteria
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set_my_colors(max.color)
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
ant.freq.success.l %>%
mutate(year = day/365) %>%
filter(frequency > 0) %>%
ggplot(aes(x = year, y = frequency, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE) -> freq.plot.tropics
save_plot(filename = "../analysis/exploratory.figs/freq.tropics.plot.pdf",
freq.plot.tropics,
base_height = 8, base_aspect_ratio = 1.5)
ant.freq.success.l %>%
filter(.id != "tropics_11") %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
guides(col = FALSE) + guides(fill = FALSE) -> prev.tropics.plot
save_plot(filename = "../analysis/exploratory.figs/prev.tropics.plot.pdf",
prev.tropics.plot,
base_height = 8, base_aspect_ratio = 1.5)
ant.freq.success.l %>%
filter(.id != "tropics_11") %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE) -> prev.tropics.plot
ant.freq.success.l %>%
mutate(year = day/365) %>%
filter(frequency > 0) %>%
ggplot(aes(x = year, y = frequency, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE) -> freq.plot.tropics
source('analysis_functions.R'); source('plotting_functions.R')
tropics.folder = "../data/tropics/"
success.criteria = as.data.frame(matrix( nrow = 1, ncol = 2, data = c(180, .1)))
colnames(success.criteria) = c("length.days", "freq")
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
tropics.antigen.frequencies <- read_outputfiles(tropics.folder, "/out.antigenFrequencies.txt")
ropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
head(tropics.data)
create_meta_data <- function(sim.dir, success.criteria) {
### Combines all the output files for novel antigens
# reading in and cleaning up the console file
console.file <- read.table(paste0(sim.dir, "/out.console.txt"), header = TRUE, fill = TRUE)
console.file = clean_console(console.file)
# find the time when novel antigens emerge
novel.types = find_antigen_emergence(console.file)
# read in output file that tracks state of simulation when antigens emerge
track.antigen <- read.table(paste0(sim.dir, "/out.trackAntigenSeries.txt"), header = TRUE)
track.antigen$day = as.character(track.antigen$day)
novel.types$day = as.character(novel.types$day)
meta.data  = left_join(x = novel.types, y = track.antigen, "day")
meta.data$day = as.character(meta.data$day)
# record the exact days when new novel types are generated
days.of.emergence = meta.data$day
## Read in viral fitness, select on the days that correspond to emergence
viral.fitness <- read.table(paste0(sim.dir, "/out.viralFitnessSeries.txt"), header = TRUE)
viral.fitness %>%
filter(day %in% days.of.emergence) %>%
mutate(day = as.character(day)) %>%
select(-simDay) %>%
filter(!duplicated(day)) -> viral.fitness.emergence
meta.data %>%
left_join(viral.fitness.emergence, by = "day") -> meta.data
## combine dominant frequency circulating at time of emergence
antigen.frequencies <- read.table(paste0(sim.dir, "/out.antigenFrequencies.txt"), header = TRUE)
dominant.types <- find_dominant_types_at_emerge(antigen.frequencies)
dominant.types %>%
filter(day %in% days.of.emergence) -> dominant.types
colnames(dominant.types)[2] = "dominant.type"; colnames(dominant.types)[3] = "dominant.freq"
dominant.types$day = as.character(dominant.types$day)
meta.data %>%
left_join(dominant.types, by = "day") -> meta.data
# combine maximum frequency the strain itself ever achieved
maximum.freq.type <- find_max_frequency(antigen.frequencies)
maximum.freq.type$antigentype = as.factor(maximum.freq.type$antigentype)
meta.data$postAntigen = as.factor(meta.data$postAntigen)
meta.data %>% left_join(maximum.freq.type, by = c("postAntigen" = "antigentype")) -> meta.data
life.span <- calculate_total_life(antigen.frequencies)
life.span$antigentype = as.character(life.span$antigentype)
meta.data %>% left_join(life.span, by = c("postAntigen" = "antigentype")) -> meta.data
# Differentiate whether it was sucessful or not
#days.above.thres = calculate_days_above_thres(antigen.frequencies, success.criteria$threshold)
#days.above.thres$antigentype = as.character(days.above.thres$antigentype)
#meta.data %>% left_join(days.above.threshold, by = c("postAntigen" = "antigentype")) -> meta.data
meta.data %>%
mutate(success = ifelse((final.max > success.criteria$freq & life.length > success.criteria$length.days), "yes", "no")) -> meta.data
return(meta.data)
}
tropics.data = create_meta_data_all(dir = tropics.folder, success.criteria)
colnames(tropics.data)
tropics.data %>%
group_by(.id) %>%
filter(success == "yes") %>%
select(.id, postAntigen) -> success.types
antigen.freq.success.df = ddply(.data = success.types, .variables = ".id", function(sim) {
successful.types = sim$postAntigen
successful.types = c(0, successful.types)
tropics.antigen.frequencies %>%
filter(.id == sim$.id[1]) %>%
filter(antigentype %in% successful.types) -> antigen.freq.sim
return(antigen.freq.sim)
})
antigen.freq.success.df %>%
group_by(.id) %>%
summarize(num.transitions = n_distinct(antigentype)) -> num.transitions
max.color = sum(num.transitions$num.transitions)
myColors = set_my_colors(max.color)
ant.freq.success.l = ddply(.data = antigen.freq.success.df, .variables = ".id", function(sim) {
sim %>%
distinct(day, antigentype, .keep_all = TRUE) %>%
spread(key = antigentype, value = frequency, fill = 0) %>%
gather(key = antigentype, value = frequency, -1, -2, - infected)  -> antigen.freq.long
return(antigen.freq.long)
})
ant.freq.success.l$antigentype = as.factor(ant.freq.success.l$antigentype)
ant.freq.success.l %>%
mutate(year = day/365) %>%
filter(frequency > 0) %>%
ggplot(aes(x = year, y = frequency, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id) +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE)
ant.freq.success.l %>%
filter(.id != "tropics_11") %>%
mutate(year = day/365) %>%
mutate(prevalence = infected*frequency*.0025) %>%
filter(prevalence > 0) %>%
ggplot(aes(x = year, y = prevalence, fill = antigentype)) +
geom_area(color = "black", aes(color = antigentype, fill = antigentype)) +
facet_wrap(~.id, scales = "free_y") +
scale_color_manual(values = myColors) +
scale_fill_manual(values = myColors)+
labs(y = "Frequency", x = "Years")  +
scale_x_continuous(breaks = seq(1:10))+
guides(col = FALSE) + guides(fill = FALSE) -> prev.tropics.plot
prev.tropics.plot
